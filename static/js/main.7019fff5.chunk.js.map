{"version":3,"sources":["Components/AppHeader/AppHeader.js","Components/InfoCard/InfoCard.js","utils.js","Components/CardsRow/CardsRow.js","Components/RankedTable/RankedTable.js","Components/Graph/Graph.js","Components/CovidMap/CovidMap.js","App.js","serviceWorker.js","index.js","Components/RankedTable/RankedTable.module.css","Components/AppHeader/AppHeader.module.css","Components/CardsRow/CardsRow.module.css","Components/InfoCard/InfoCard.module.css","Components/CovidMap/CovidMap.module.css"],"names":["AppHeader","selectedCountry","handleDropdownSelect","countriesList","className","styles","app__header","FormControl","Select","app__dropdown","variant","value","onChange","MenuItem","map","country","index","countryCode","key","InfoCard","title","color","casesToday","totalCases","Card","card","CardContent","Typography","style","KformatLargeNumbers","number","factor","Math","pow","floor","String","length","roundedNumber","Number","round","KsortByCases","countries","newCountries","sort","a","b","cases","CardsRow","countryData","row","todayCases","todayRecovered","recovered","todayDeaths","deaths","tests","RankedTable","tableContainer","header","table","toLocaleString","generateDataset","countriesData","labels","datapoints","push","Graph","useState","setLabels","setDatapoints","useEffect","url","fetch","then","response","json","data","newLabels","newDatapoints","datasets","label","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","responsive","maintainAspectRatio","CovidMap","latitude","longitude","center","zoom","TileLayer","attribution","CircleMarker","lat","long","fillOpacity","radius","sqrt","CovidMarkers","App","setCountriesList","setSelectedCountry","selectedCountryData","setSelectedCountryData","setLat","setLong","countryInfo","console","log","iso2","event","newCountry","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.7019fff5.chunk.js","sourcesContent":["import React from \"react\";\nimport { Select, FormControl, MenuItem } from \"@material-ui/core\";\nimport styles from \"./AppHeader.module.css\";\n\nconst AppHeader = ({\n  selectedCountry,\n  handleDropdownSelect,\n  countriesList,\n}) => {\n  return (\n    <div className={styles.app__header}>\n      <h1>COVID-19 TRACKER</h1>\n      <FormControl>\n        <Select\n          className={styles.app__dropdown}\n          variant=\"outlined\"\n          value={selectedCountry}\n          onChange={handleDropdownSelect}\n        >\n          <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n          {countriesList.map((country, index) => {\n            return (\n              <MenuItem value={country.countryCode} key={index}>\n                {country.country}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default AppHeader;\n","import React from \"react\";\nimport styles from \"./InfoCard.module.css\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nconst InfoCard = ({ title, color, casesToday, totalCases }) => {\n  return (\n    <Card className={styles.card}>\n      <CardContent>\n        <Typography color=\"textSecondary\">{title}</Typography>\n        <Typography style={{ color: color }} variant=\"h3\">\n          {casesToday}\n        </Typography>\n        <Typography color=\"textSecondary\">{totalCases}</Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default InfoCard;\n","const KformatLargeNumbers = (number) => {\n  if (number >= 1000) {\n    const factor = Math.pow(\n      10,\n      3 * Math.floor((String(number).length - 1) / 3)\n    );\n    let roundedNumber = number / factor;\n    roundedNumber = Number(Math.round(roundedNumber + \"e\" + 1) + \"e-\" + 1);\n    if (factor === 1000) {\n      return roundedNumber + \"K\";\n    }\n    if (factor === 1000000) {\n      return roundedNumber + \"M\";\n    }\n    if (factor === 1000000000) {\n      return roundedNumber + \"B\";\n    }\n  }\n  return number;\n};\n\nconst KsortByCases = (countries) => {\n  const newCountries = [...countries];\n  newCountries.sort((a, b) => (a.cases < b.cases ? 1 : -1));\n  return newCountries;\n};\n\nconst KformatWithComma = (number) => {\n  return number.toLocaleString();\n};\n\nexport { KformatLargeNumbers, KsortByCases, KformatWithComma };\n","import React from \"react\";\nimport styles from \"./CardsRow.module.css\";\nimport InfoCard from \"../InfoCard/InfoCard\";\nimport { KformatLargeNumbers } from \"../../utils\";\n\nconst CardsRow = ({ countryData }) => {\n  return (\n    <div className={styles.row}>\n      <InfoCard\n        title=\"Coronavirus Cases\"\n        color=\"#ff3333\"\n        casesToday={\"+\" + KformatLargeNumbers(countryData.todayCases)}\n        totalCases={KformatLargeNumbers(countryData.cases) + \" Total\"}\n      />\n      <InfoCard\n        title=\"Recovered\"\n        color=\"#55cc55\"\n        casesToday={\"+\" + KformatLargeNumbers(countryData.todayRecovered)}\n        totalCases={KformatLargeNumbers(countryData.recovered) + \" Total\"}\n      />\n      <InfoCard\n        title=\"Deaths\"\n        color=\"#ff3333\"\n        casesToday={\"+\" + KformatLargeNumbers(countryData.todayDeaths)}\n        totalCases={KformatLargeNumbers(countryData.deaths) + \" Total\"}\n      />\n      <InfoCard\n        title=\"Tests\"\n        color=\"#55cc55\"\n        casesToday={KformatLargeNumbers(countryData.tests)}\n        // totalCases={countryData.tests}\n      />\n    </div>\n  );\n};\n\nexport default CardsRow;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport styles from \"./RankedTable.module.css\";\nimport { KformatWithComma } from \"../../utils\";\n\nconst RankedTable = ({ countriesList }) => {\n  return (\n    <div className={styles.tableContainer}>\n      <Typography className={styles.header} variant=\"h5\" color=\"textSecondary\">\n        Live Cases by Country\n      </Typography>\n      <div className={styles.table}>\n        {countriesList.map((country, index) => {\n          return (\n            <tr key={index}>\n              <td>{country.country}</td>\n              <td>{KformatWithComma(country.cases)}</td>\n            </tr>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default RankedTable;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst generateDataset = (countriesData) => {\n  const labels = [];\n  const datapoints = [];\n  if (countriesData[\"timeline\"]) {\n    for (let key in countriesData[\"timeline\"][\"cases\"]) {\n      labels.push(key);\n      datapoints.push(countriesData[\"timeline\"][\"cases\"][key]);\n    }\n  } else {\n    for (let key in countriesData[\"cases\"]) {\n      labels.push(key);\n      datapoints.push(countriesData[\"cases\"][key]);\n    }\n  }\n  return [labels, datapoints];\n};\n\nconst Graph = ({ countryCode }) => {\n  const [labels, setLabels] = useState([]);\n  const [datapoints, setDatapoints] = useState([]);\n  useEffect(() => {\n    (async () => {\n      const url =\n        countryCode === \"worldwide\"\n          ? \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\n          : `https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=120`;\n      await fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n          const [newLabels, newDatapoints] = generateDataset(data, \"timeline\");\n          setLabels(newLabels);\n          setDatapoints(newDatapoints);\n        });\n    })();\n  }, [countryCode]);\n  const data = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"Coronavirus Cases\",\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 0,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 0,\n        pointHitRadius: 10,\n        data: datapoints,\n      },\n    ],\n  };\n  return (\n    <Line\n      data={data}\n      options={{ responsive: true, maintainAspectRatio: true }}\n    />\n  );\n};\n\nexport default Graph;\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer, CircleMarker } from \"react-leaflet\";\nimport styles from \"./CovidMap.module.css\";\n\nconst CovidMarkers = (countriesData) => {\n  return countriesData.map((country) => {\n    return (\n      <CircleMarker\n        center={[country.lat, country.long]}\n        color=\"red\"\n        fillOpacity={0.4}\n        radius={Math.sqrt(country.cases) / 20}\n      ></CircleMarker>\n    );\n  });\n};\n\nconst CovidMap = ({ latitude, longitude, countriesData }) => {\n  return (\n    <div className={styles.map}>\n      <LeafletMap center={[latitude, longitude]} zoom={3}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {CovidMarkers(countriesData)}\n      </LeafletMap>\n    </div>\n  );\n};\n\nexport default CovidMap;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport AppHeader from \"./Components/AppHeader/AppHeader\";\nimport CardsRow from \"./Components/CardsRow/CardsRow\";\nimport RankedTable from \"./Components/RankedTable/RankedTable\";\nimport Graph from \"./Components/Graph/Graph\";\nimport CovidMap from \"./Components/CovidMap/CovidMap\";\nimport { KsortByCases } from \"./utils\";\n\nconst App = () => {\n  const [countriesList, setCountriesList] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"worldwide\");\n  const [selectedCountryData, setSelectedCountryData] = useState({});\n  const [lat, setLat] = useState(0);\n  const [long, setLong] = useState(0);\n\n  useEffect(() => {\n    (async () => {\n      const url =\n        selectedCountry === \"worldwide\"\n          ? \"https://disease.sh/v3/covid-19/all\"\n          : `https://disease.sh/v3/covid-19/countries/${selectedCountry}`;\n      await fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n          setSelectedCountryData(data);\n          if (data.countryInfo) {\n            console.log(data.countryInfo.lat, data.countryInfo.long);\n            setLat(data.countryInfo.lat);\n            setLong(data.countryInfo.long);\n          } else {\n            setLat(0);\n            setLong(0);\n          }\n        });\n    })();\n  }, [selectedCountry]);\n\n  useEffect(() => {\n    (async () => {\n      const url = \"https://disease.sh/v3/covid-19/countries\";\n\n      await fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => {\n            return {\n              country: country.country,\n              countryCode: country.countryInfo.iso2,\n              cases: country.cases,\n              deaths: country.deaths,\n              recovered: country.recovered,\n              lat: country.countryInfo.lat,\n              long: country.countryInfo.long,\n            };\n          });\n          setCountriesList(countries);\n        });\n    })();\n  }, []);\n\n  const changeCountry = (event) => {\n    const newCountry = event.target.value;\n    setSelectedCountry(newCountry);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <AppHeader\n          selectedCountry={selectedCountry}\n          handleDropdownSelect={changeCountry}\n          countriesList={countriesList}\n        />\n        <CardsRow countryData={selectedCountryData} />\n        <CovidMap\n          latitude={lat}\n          longitude={long}\n          countriesData={countriesList}\n        />\n      </div>\n      <div className=\"app__right\">\n        <RankedTable countriesList={KsortByCases(countriesList)} />\n        <Graph countryCode={selectedCountry} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"RankedTable_tableContainer__3CpE_\",\"header\":\"RankedTable_header__1xrsM\",\"table\":\"RankedTable_table__1veH7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app__dropdown\":\"AppHeader_app__dropdown__LxBI2\",\"app__header\":\"AppHeader_app__header__2gWJR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"CardsRow_row__3ovfG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"InfoCard_card__lsLmz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"CovidMap_map__1DQjU\"};"],"sourceRoot":""}